{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "area= 14128.0\n",
      "area= 9660.0\n",
      "PLACA:  ' EH\n",
      "\n",
      "PBX'9947,\n",
      "\n",
      "\n",
      "area= 13112.0\n",
      "PLACA:  ' ECUADOR\n",
      "\n",
      "PBX-9947\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# RECONOCIMIENTO DE PLACAS\n",
    "\n",
    "# Instalación de OpenCV\n",
    "# pip install opencv-contrib-python\n",
    "\n",
    "# Instalación de la librería de Tesseract\n",
    "# pip install pytesseract\n",
    "\n",
    "# Instalación del programa Tesseract\n",
    "# Instalar el programa Tesseract.exe\n",
    "\n",
    "# Importar librería OpenCV\n",
    "import cv2\n",
    "# Importar Librería para reconocimiento de caracteres\n",
    "import pytesseract\n",
    "\n",
    "# Necesaria para ejecutar pytesseract desde windows\n",
    "pytesseract.pytesseract.tesseract_cmd = r'C:\\Program Files\\Tesseract-OCR\\tesseract'\n",
    "\n",
    "# Array para la placa detectada\n",
    "placa = []\n",
    "\n",
    "# Lee la imagen y la convierte en una matriz \n",
    "image = cv2.imread('fr.jpg')\n",
    "\n",
    "# Cambia la imagen de bgr a una escala de grises\n",
    "gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n",
    "\n",
    "# Eliminacion de ruido en la imagen\n",
    "gray = cv2.blur(gray,(3,3))\n",
    "# Deteccion de bordes con valores umbral /Invierte el color de la imagen\n",
    "\n",
    "canny = cv2.Canny(gray,150,200)\n",
    "# Engrosa las areas blancas para detectar mejor los contornos\n",
    "\n",
    "canny = cv2.dilate(canny,None,iterations=1)\n",
    "# Guarda los contornos en la siguiente variable \n",
    "\n",
    "cnts,_ = cv2.findContours(canny,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)\n",
    "# Dibuja todos los contornos encontrados\n",
    "# cv2.drawContours(image,cnts,-1,(0,255,0),2)\n",
    "\n",
    "#Recorre los contornos dibujados y elimina los innecesarios\n",
    "for c in cnts:\n",
    "  # Con la siguiente funcion de area define el area a buscar\n",
    "  area = cv2.contourArea(c)\n",
    "    \n",
    "  # Define el rectangulo con cuatro vertices\n",
    "  x,y,w,h = cv2.boundingRect(c)\n",
    "  # Determina los vertices del contorno\n",
    "  epsilon = 0.09*cv2.arcLength(c,True)\n",
    "  # Cuenta o enumera los vertices del area \n",
    "  approx = cv2.approxPolyDP(c,epsilon,True)\n",
    "    \n",
    "#Por tanteo se define el contorno con el tamaño deseado es decir restrigimos el for  \n",
    "#Ademas se asegura de que el contorno tenga cuatro vertices\n",
    "  if len(approx)==4 and area>9000:\n",
    "        \n",
    "    #Se imprime el area de la figura\n",
    "    print('area=',area)\n",
    "    \n",
    "    #Relacion de 2,4 en placas respecto al ancho y la altura\n",
    "    aspect_ratio = float(w)/h\n",
    "    \n",
    "    if aspect_ratio>2.4:\n",
    "        \n",
    "#Almacena el contorno encontrado en escala de grises  \n",
    "      placa = gray[y:y+h,x:x+w]\n",
    "    \n",
    "#Convierte el rectangulo encontrado a texto con tysseract     \n",
    "      text = pytesseract.image_to_string(placa,config='--psm 11')\n",
    "    \n",
    "      print('PLACA: ',text)\n",
    "        \n",
    "#Para visualizar la placa en pantalla\n",
    "      cv2.imshow('PLACA',placa)\n",
    "    \n",
    "#Para mover la imagen a la posicion (780,10) en la pantalla\n",
    "      cv2.moveWindow('PLACA',780,10)   \n",
    "#Para seleccionar en la imagen el contorno rectangular\n",
    "      cv2.rectangle(image,(x,y),(x+w,y+h),(0,255,0),3)    \n",
    "#Para colocar el texto extraido de la imagen,en la imagen del coche\n",
    "      cv2.putText(image,text,(x-20,y-10),1,2.2,(0,255,0),3)\n",
    "\n",
    "#Para imprimir la imagen o fotografia del coche\n",
    "cv2.imshow('Image',image)\n",
    "#Para mover la fotografia\n",
    "cv2.moveWindow('Image',45,10)\n",
    "#Para cerrar el proceso con alguna tecla presionada\n",
    "cv2.waitKey(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
